Drozdovska Marta variant 17 chapter 10 ex1
a. If Angus sings, it is not the case that Bertie sulks.
import nltk
lp=nltk.logicParser()
R=lp.parser('Ang-> -BerS')
import nltk
lp=nltk.logicParser()
R=lp.parser('Ang-> -BerS')
 prover = nltk.Prover9() 
 prover.prove(R)
 prover=nltk.Prover(9)
 prover.prover( R)
 b. Cyril runs and barks
 import nltk
 lp=nltk.logicParser()
 R=lp.parser('Cyr& Cyr')
 import nltk
 lp.nltk.logicParser()
 R=lp.parser('Cyr & Cyr') # cyril runs
                             cyril barks
prover=nltk.Prover9()
prover.prover(R)
prover=nltk.Prover9()
prover.prover(R)

c. It will snow if it doesn’t rain.
import nltk
lp.nltk.logicParser()
Snf=lp.parser('Snow')
NotRain=lp.parser('-Rain')
R=lp.parser('Snow-> -Rain')

prover=nltk.Prover9()
prover.prover (NotRain, [Snow, R])
import nltk
lp=nltk.logic_Parser()
Snf=lp.parser('Snow')
NotRain=lp.parser('-Rain')
R=lp.parser('Snow-> -Rain')
pover=nltk .Pover9()
prover.prover (NotRain, [Snow, R])

 d. It’s not the case that Irene will be happy if Olive or Tofu comes.
 import nltk
 lp = nltk.LogicParser ()
 IreneNotHappy = lp.parse ('-IreneHappy - ')
 R = lp.parse('-IreneHappy -> OliveCom | TofuCom ')
 prover = nltk.Prover9 ()
 prover.prove (R)
 import nltk
 lp = nltk.LogicParser ()
 IreneNotHappy = lp.parse ('-IreneHappy - ')
 R = lp.parse('-IreneHappy -> OliveCom | TofuCom ')
 prover = nltk.Prover9 ()
 prover.prove (R)

 e. Pat didn’t cough or sneeze.
 import nltk
 lp.nltk.logicParser()
 R=lp.parser('('-PatC | -PatS') # -Pat – Pat didn’t cough')
                                 #-Pat  – Pat didn’t sneeze
 pover=nltk.Pover9()
 pover.pover (R)
  f. If you don’t come if I call, I won’t come if you call.
  import nltk
  lp=nltk.logic_Parser
  R=lp.parser('-iCome <-> -youCome') # -iCome - If you don’t come if I  call
  import nltk
  lp=nltk.logic_Parser()
  R=nlp.parser('-iCome <-> -youCome') # -iCome - If you don’t come if I  call


                                           youCome – I won’t come if you call
    prover=nltk.Prover9()
    pover.pover(R)
    prover = nltk.Prover9 ()
    pover.pover(R)
    
    



 
